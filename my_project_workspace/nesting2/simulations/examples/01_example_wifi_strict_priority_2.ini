[General]
network = WiFiTestScenario2

description = wireless hosts communicating using TSN: one access point on one end
record-eventlog = false 
debug-on-errors = true
result-dir = results_wifi_strict_priority
sim-time-limit = 1s

# debug
**.displayAddresses = true
**.verbose = true

# MAC Addresses
**.robotController.eth.address = "00-00-00-00-00-01"
**.workstation1.eth.address = "00-00-00-00-00-02"
**.roboticArm.wlan[0].address = "00-00-00-00-00-04"
**.backupServer.wlan[0].address	= "00-00-00-00-00-05"

# Extra definitions for the wireless portion:
# analog model
**.analogModel.ignorePartialInterference = true

# access point configuration
**.accessPoint2.wlan[0].address = "00-00-00-00-00-07"
**.accessPoint2.wlan[0].radio.channelNumber = 1
**.accessPoint2.wlan[0].mgmt.ssid = "access2"

# robotic arm and backup server are associated with AP2
**.roboticArm.wlan[0].mgmt.accessPointAddress = "00-00-00-00-00-07"
**.roboticArm.wlan[0].radio.channelNumber = 1
**.backupServer.wlan[0].mgmt.accessPointAddress = "00-00-00-00-00-07"
**.backupServer.wlan[0].radio.channelNumber = 1

# use simplified ieee802.11 management (no association, authentication etc.)
**.roboticArm.wlan[*].mgmt.typename = "Ieee80211MgmtStaSimplified"
**.backupServer.wlan[*].mgmt.typename = "Ieee80211MgmtStaSimplified"
**.roboticArm.**.agent.typename = ""
**.backupServer.**.agent.typename = ""
**.accessPoint*.wlan[*].mgmt.typename = "Ieee80211MgmtApSimplified"
# End of extras

# Switches
**.switch*.processingDelay.delay = 5us
**.filteringDatabase.database = xmldoc("xml/TestScenarioRouting.xml", "/filteringDatabases/")

**.switchA.eth[3].queue.gateController.initialSchedule = xmldoc("xml/TestScenarioSchedule_AllOpen.xml", "/schedules/switch[@name='switchA']/port[@id='3']/schedule")
**.switchB.eth[1].queue.gateController.initialSchedule = xmldoc("xml/TestScenarioSchedule_AllOpen.xml", "/schedules/switch[@name='switchB']/port[@id='1']/schedule")
**.switch*.eth[*].queue.gateController.enableHoldAndRelease = false
**.switch*.eth[*].queue.numberOfQueues = 8
**.switch*.eth[*].queue.tsAlgorithms[0].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[1].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[2].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[3].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[4].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[5].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[6].typename = "StrictPriority"
**.switch*.eth[*].queue.tsAlgorithms[7].typename = "StrictPriority"
**.switch*.eth[*].queue.queues[0].expressQueue = true
**.switch*.eth[*].queue.queues[1].expressQueue = true
**.switch*.eth[*].queue.queues[2].expressQueue = true
**.switch*.eth[*].queue.queues[3].expressQueue = true
**.switch*.eth[*].queue.queues[4].expressQueue = true
**.switch*.eth[*].queue.queues[5].expressQueue = true
**.switch*.eth[*].queue.queues[6].expressQueue = true
**.switch*.eth[*].queue.queues[7].expressQueue = true

**.queues[*].bufferCapacity = 363360b

**.switchA.eth[3].mac.enablePreemptingFrames = false

# Schedule/Routing Swap
#**.scheduleSwap.schedule = xmldoc("xml/TestScenarioScheduleSwap.xml")

# Robot Controller
**.robotController.trafGenSchedApp.initialSchedule = xmldoc("xml/TestScenarioSchedule_AllOpen.xml")

# Workstations
**.workstation*.trafGenApp.destAddress = "00-00-00-00-00-05"
**.workstation*.trafGenApp.packetLength = 1400Byte-4Byte # MTU-Size - VLAN-Tag-Size
**.workstation*.trafGenApp.sendInterval = 400us
**.workstation*.trafGenApp.vlanTagEnabled = true
**.workstation1.trafGenApp.pcp = 6
**.workstation2.trafGenApp.pcp = 5

# Robotic Arms
**.roboticArm.trafGenApp.numPacketsPerBurst = 0
**.roboticArm.trafGenApp.sendInterval = 1ms
**.roboticArm.trafGenApp.packetLength = 100B

# Backup Server
**.backupServer.trafGenApp.numPacketsPerBurst = 0
**.backupServer.trafGenApp.sendInterval = 1ms
**.backupServer.trafGenApp.packetLength = 100B

# Extra bits for the wireless portion:
# Wireless Medium
#**.mgmt.frameCapacity = 10
#**.mgmt.numChannels = 2
#**.wlan[*].mac.retryLimit = 7
#**.wlan[*].mac.dcf.channelAccess.cwMin = 7
#**.wlan[*].mac.cwMinBroadcast = 31

# global data rates
**.wlan*.bitrate = 693.3Mbps

**.bandName = "5 GHz (20 MHz)"
**.opMode = "ac"
**.wlan[*].radio.antenna.numAntennas = 8 #maximum number of streams for 802.11ac is 8. Antenna count must not be less than streams.

# For QoS. Doesn't work at the moment.
**.workstation*.trafGenApp.destPort = 21
**.robotController.trafGenSchedApp.destPort = 5000

**.workstation*.trafGenApp.packetName = "background"
**.robotController.trafGenApp.packetName = "voice"

**.backupServer.trafGenApp.localPort = 21
**.roboticArm.trafGenApp.localPort = 5000

**.*.wlan[*].mac.qosStation = true
**.*.wlan[*].classifier.typename = "QosClassifier"
# End of QoS

# Extra parameters mostly for the wireless portion, if needed

#**.wlan[*].radio.transmitter.power = 100mW
#**.wlan[*].radio.transmitter.headerBitLength = 96b
#**.centerFrequency = 5GHz
#**.wlan[*].radio.receiver.sensitivity = -85dBm
#**.wlan[*].radio.receiver.snirThreshold = 4dB
#**.wlan[*].radio.signalAnalogRepresentation = "dimensional"

# Modelling interference and communication
#**.radioMedium.analogModel.ignorePartialInterference = true
#**.accessPoint*.wlan[*].radio.receiver.ignoreInterference = true # these are also for the unit disk radio model
#**.workstation*.wlan[*].radio.receiver.ignoreInterference = true
#**.backupServer.wlan[*].radio.receiver.ignoreInterference = true
#**.roboticArm.wlan[*].radio.receiver.ignoreInterference = true
#**.wlan[*].radio.transmitter.interferenceRange = 120m
#**.wlan[*].radio.displayInterferenceRange = true
#**.wlan[*].radio.transmitter.communicationRange = 200m  # only for unit disk radio
#**.wlan[*].radio.displayCommunicationRange = true # hide for now, it looks messy
#**.wlan[0].mac.useAck = false #extra
#**.wlan[0].mac.fullDuplex = false #extra

# listening only possible if max power >= energy detection
#**.radioMedium.backgroundNoise.power = -85dBm # energyDetection is -85dBm at default
#**.wlan[*].radio.receiver.energyDetection = -110dBm

# reception only possible if minReceptionPower >= sensitivity
#**.wlan[*].radio.receiver.sensitivity = -85dBm

# Visualisation definitions to support animations to show what's going on
#**.visualizer.mediumVisualizer.displaySignals = true
#**.visualizer.physicalLinkVisualizer.displayLinks = true

# This next line helps with the "implicit chunk serialization" error
**.visualizer.mediumVisualizer.packetFilter = "" #take care to deal with this line if need be
